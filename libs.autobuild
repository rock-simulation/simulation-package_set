
def mars_package(srcDir,type = :cmake_package)
    if Gem::Version.new(Autobuild::VERSION) <= Gem::Version.new('1.7.2')
        mars_path="simulation/mars/"
        send(type,srcDir) do |pkg|
            pkg.srcdir = mars_path
            pkg.post_import do
                pkg.srcdir = srcDir
                Autoproj.manifest.load_package_manifest(pkg.name)
            end
            yield pkg if block_given?
        end
    else
        send(type,srcDir) do |pkg|
            pkg.define "ROCK",'true' if type == :cmake_package
            pkg.importdir = "simulation/mars/"
            yield pkg if block_given?
        end
    end
end


mars_package("simulation/mars/common/gui/config_map_gui")
mars_package("simulation/mars/common/gui/gui_app")
mars_package("simulation/mars/entity_generation/primitives")
mars_package("simulation/mars/plugins/entity_view")
mars_package("simulation/mars/plugins/SkyDomePlugin")
mars_package("simulation/mars/plugins/CameraGUI")
mars_package("simulation/mars/common/graphics/osg_material_manager")
mars_package("simulation/mars/common/graphics/osg_terrain")
mars_package("simulation/mars/common/graphics/osg_points")
mars_package("simulation/mars/common/graphics/osg_frames")
mars_package("simulation/mars/common/graphics/osg_animations")
mars_package("simulation/mars/plugins/AnimationPlugin")
mars_package("simulation/mars/plugins/TerrainPlugin")
mars_package("simulation/mars/plugins/PythonMars") do |pkg|
    pkg.env_add_path 'PYTHONPATH', File.join(pkg.prefix, "share","PythonMars","python")
end
mars_package("simulation/mars/common/gui/data_broker_plotter2")
cmake_package("simulation/mars_extensions/data_broker_graph_view")
cmake_package("external/osgQt")

in_flavor 'stable' do
    mars_package("simulation/mars/scripts/cmake")
end

in_flavor 'master','stable' do
    mars_package("simulation/mars/entity_generation/entity_factory")
    mars_package("simulation/mars/entity_generation/smurf")
    mars_package("simulation/mars/smurf_loader")
    mars_package("simulation/mars/plugins/Text3D")
    mars_package("simulation/mars/common/graphics/osg_text")
    mars_package("simulation/mars/common/graphics/osg_text_factory")
    mars_package("simulation/mars/common/graphics/osg_lines")
    
    cmake_package("simulation/lib_manager")
    cmake_package("simulation/smurf_parser")

    cmake_package("tools/configmaps")
    metapackage 'simulation/configmaps', 'tools/configmaps'

    mars_package("simulation/mars/common/cfg_manager")
    mars_package("simulation/mars/common/gui/main_gui")
    mars_package("simulation/mars/common/data_broker")
    mars_package("simulation/mars/common/gui/cfg_manager_gui")
    mars_package("simulation/mars/common/gui/lib_manager_gui")
    mars_package("simulation/mars/common/gui/log_console")
    mars_package("simulation/mars/common/gui/data_broker_gui")
    mars_package("simulation/mars/common/gui/data_broker_plotter")
    mars_package("simulation/mars/common/utils")
    mars_package("simulation/mars/interfaces")
    mars_package("simulation/mars/sim") do |pkg|
        #Define that mars should use the following path as default for it's configuration
        #to enable the autostart of mars
        pkg.define "DEFAULT_CONFIG_DIR", File.join(Autobuild.prefix,"configuration","mars_default")
    end
    mars_package("simulation/mars/gui")
    mars_package("simulation/mars/graphics")
    mars_package("simulation/mars/app") do |pkg|
        pkg.define "DEFAULT_CONFIG_DIR", File.join(Autobuild.prefix,"configuration","mars_default")
    end
    mars_package("simulation/mars/viz")
    mars_package("simulation/mars/scene_loader")
    mars_package("simulation/mars/plugins/connexion_plugin")
    mars_package("simulation/mars/plugins/gamepad_plugin")
    mars_package("simulation/mars/plugins/VirtualJoystickPlugin")
    mars_package("simulation/mars/plugins/constraint_plugin")
    mars_package("simulation/mars/plugins/connectors")
    
    mars_package("simulation/mars/doc",:import_package) do |pkg|
        pkg.doc_task do
            pkg.progress_start "generating Documentation for mars/doc", :done_message => 'generated_documentation for mars/doc' do
                Autobuild::Subprocess.run(pkg, 'doc', Autobuild.tool(:make), "-C#{File.join(pkg.srcdir)}", 'doc')
            end
        end
        pkg.doc_dir = 'build'
    end
    
    autotools_package 'simulation/ode' do |pkg|
        pkg.depends_on 'libtool'
        pkg.provides "pkgconfig/ode"
        pkg.configureflags <<
            "--enable-double-precision" <<
            "--disable-demos" <<
            "--enable-malloc" <<
            "--with-drawstuff=none" <<
            "CFLAGS=-fPIC -O2 -Wall" <<
            "CXXFLAGS=-fPIC -O2 -Wall"
    end
    autotools_package 'simulation/ode-16' do |pkg|
        pkg.using[:autogen] = 'bootstrap'
        pkg.depends_on 'libtool'
        pkg.provides "pkgconfig/ode"
        pkg.configureflags <<
            "--enable-double-precision" <<
            "--disable-demos" <<
            "--enable-malloc" <<
            "--with-drawstuff=none" <<
            "CFLAGS=-fPIC -O2 -Wall" <<
            "CXXFLAGS=-fPIC -O2 -Wall"
    end
    Autoproj.add_osdeps_overrides 'external/ode', :package => 'simulation/ode'
    
end

import_package 'models/robots/robo2'
import_package 'models/robots/robo3'
import_package 'models/robots/turtlebot'
import_package 'models/robots/stick_insect'
import_package 'models/robots/wheelchair'
import_package 'models/environments/area1'
import_package 'models/environments/area2'
import_package 'models/environments/office1'
import_package 'models/environments/lecture_room'
